Given the EBNF notation for 'Alma normalization rules' at https://raw.githubusercontent.com/mehmetc/AlmaNormalizationRules/main/prompts/create_rule_from_ebnf.prompt
Create a rule that 'Remove all 650 fields which have 2nd indicator 0'.
Hints:
- use '(TRUE)' as a condition when there is 1 action and the action also contains a condition. 
- priority is by default 1 and can be omitted if no explicit priority is given.
- Use this template to create rules:
rule "rule name"
priority 1
when
    conditions
then
 actions
end

```EBNF
(*EBNF of Alma Normalization Rules*)
grammar = { rule } ;
(* <rule> represents a single normalization rule, which consists of conditions and actions.*)
rule = rule_name, 'priority', priority, 'when', '(', conditions, ')', 'then', actions, 'end' ;

(* <rule_name> contains a short description of what the rule does*)
rule_name = string ;

(* <priority> this is the rule priority a higher priority occurs first. 2 occurs before 1 and 10 occurs before 9. priority can be omitted if it is 1, the default *)
priority = digit;

(* <conditions> represent the conditions that need to be met for the actions to be applied. Conditions can be simple or compound, combining multiple conditions with logical operators.*)
conditions = condition | condition, logical_operator, conditions | boolean;

(* <condition> represents either a field-level condition or a subfield-level condition. *)
condition = field_condition | subfield_condition;

boolean = 'TRUE' | 'FALSE';

field_condition = field_tag, comparison_operator, value;

subfield_condition = field_tag, subfield_tag, comparison_operator, value;

(* <actions> represent the actions to be taken if the conditions are met. Actions can be transformations, moves, or deletions. *)
actions = action | action, separator, actions;
action = transformation | move | delete | remove_field_action;

transformation = field_tag, transformation_operator, value;

move = field_tag, field_tag;

delete = 'DELETE';

remove_field_action = 'removeField', '"', field_tag, '"', 'if', '(', exists_condition, ')';
exists_condition = 'exists', '"', field_tag, '.', subfield_pattern, ',"', value, '"';

(* <field_tag> and <subfield_tag> represent the tags for fields and subfields in MARC records. *) 
field_tag = digit, digit, digit;
subfield_tag = letter | digit;

(* <subfield_pattern> represents a pattern that matches subfield tags. *)
subfield_pattern = subfield_tag | '{', subfield_tag_list, '}';
subfield_tag_list = subfield_tag | subfield_tag, ',', subfield_tag_list;

(* <comparison_operator> represents the comparison operators used in conditions. *)
comparison_operator = '=' | '!=' | '<' | '>' | '<=' | '>=' | 'CONTAINS' | 'STARTS_WITH' | 'ENDS_WITH';

(* <logical_operator> represents the logical operators used to combine conditions. *)
logical_operator = 'AND' | 'OR' | 'NOT';

(* <transformation_operator> represents the operators used in transformation actions. *)
transformation_operator = 'REPLACE' | 'APPEND' | 'PREPEND' | 'CONCATENATE';

(* <separator> is a delimiter used to separate multiple actions. *)
separator = ';';

(* <value> represents the values used in conditions and transformations. *)
value = string;

(* <whitespace> represents a whitespace *)
whitespace = {" " | "\t" | "\n" | "\r"};

string = '"', characters, '"';

characters = {character};
character = letter | digit | special_character | escape_sequence;
hex = digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b"
       | "c" | "d" | "e" | "f";
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;


digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
special_character = "!" | "@" | "#" | "/" | ":" | "~";
escape_sequence =  "\\", ('"' | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "u", hex, hex, hex, hex) ;
```